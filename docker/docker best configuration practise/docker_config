1) Audit docker unix socket
docker unix socket should be accessable by root user and user whoc are the part of dockergroup only. other should not have access

[root@server1 ~]# ls -l /var/run/docker.sock
srw-rw----. 1 root docker 0 Aug  4 08:24 /var/run/docker.sock

2) Make sure socket is not listen on tcp socket 2375 
[root@server1 ~]# netstat -tpln
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    
tcp        0      0 0.0.0.0:8765            0.0.0.0:*               LISTEN      13676/falco         
tcp        0      0 0.0.0.0:5901            0.0.0.0:*               LISTEN      1305/Xvnc           
tcp        0      0 0.0.0.0:6001            0.0.0.0:*               LISTEN      1305/Xvnc           
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1105/sshd           
tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      1835/master         
tcp        0      0 127.0.0.1:6010          0.0.0.0:*               LISTEN      8316/sshd: root@pts 
tcp6       0      0 :::33060                :::*                    LISTEN      2855/mysqld         
tcp6       0      0 :::3306                 :::*                    LISTEN      2855/mysqld         
tcp6       0      0 :::5901                 :::*                    LISTEN      1305/Xvnc           
tcp6       0      0 :::80                   :::*                    LISTEN      366/httpd           
tcp6       0      0 :::6001                 :::*                    LISTEN      1305/Xvnc           
tcp6       0      0 :::22                   :::*                    LISTEN      1105/sshd           
tcp6       0      0 ::1:25                  :::*                    LISTEN      1835/master         
tcp6       0      0 ::1:6010                :::*                    LISTEN      8316/sshd: root@pts 

3) Audit docker group using below command
[root@server1 ~]# cat /etc/group | grep docker
docker:x:993:

only reuired use should be part of docker group and that use only able to access docker client.
other use should get permission denied as shown below

[abc@server1 root]$ docker ps
Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/json: dial unix /var/run/docker.sock: connect: permission denied

4) secure docker access by default using TLS using belwo link
https://docs.docker.com/engine/security/protect-access/

5) user namespace remapping 
To force processes running in Docker containers to run with an alternate user namespace mapping on the host system,
use the --userns-remap option as a startup parameter for the Docker engine. This functionality provides an additional 
layer of security to the host system. The processes that are running in each container are run with the UIDs and GIDs of 
a subordinate mapping defined in /etc/subuid and /etc/subgid. The shadow-utils project provides subordinate user mappings, 
which are a function of user namespaces within the Linux kernel. 

https://dreamlab.net/en/blog/post/user-namespace-remapping-an-advanced-feature-to-protect-your-docker-environments/

to check its is enable or disable please use below steps. below snippit shows it is disable.

root@315d139b8979:/# wget https://github.com/genuinetools/amicontained/releases/download/v0.4.9/amicontained-linux-amd64
root@315d139b8979:/# ./amicontained-linux-amd64 
Container Runtime: docker
Has Namespaces:
	pid: true
	user: false
AppArmor Profile: system_u:system_r:spc_t:s0
Capabilities:
	BOUNDING -> chown dac_override fowner fsetid kill setgid setuid setpcap net_bind_service net_raw sys_chroot mknod audit_write setfcap
Seccomp: filtering
Blocked Syscalls (63):
	MSGRCV PTRACE SYSLOG SETSID USELIB USTAT SYSFS VHANGUP PIVOT_ROOT _SYSCTL ACCT SETTIMEOFDAY MOUNT UMOUNT2 SWAPON SWAPOFF REBOOT SETHOSTNAME SETDOMAINNAME IOPL IOPERM CREATE_MODULE INIT_MODULE DELETE_MODULE GET_KERNEL_SYMS QUERY_MODULE QUOTACTL NFSSERVCTL GETPMSG PUTPMSG AFS_SYSCALL TUXCALL SECURITY LOOKUP_DCOOKIE CLOCK_SETTIME VSERVER MBIND SET_MEMPOLICY GET_MEMPOLICY KEXEC_LOAD ADD_KEY REQUEST_KEY KEYCTL MIGRATE_PAGES UNSHARE MOVE_PAGES PERF_EVENT_OPEN FANOTIFY_INIT NAME_TO_HANDLE_AT OPEN_BY_HANDLE_AT SETNS PROCESS_VM_READV PROCESS_VM_WRITEV KCMP FINIT_MODULE KEXEC_FILE_LOAD BPF USERFAULTFD PREADV2 PWRITEV2 PKEY_MPROTECT PKEY_ALLOC PKEY_FREE
Looking for Docker.sock

if it is enable then it would have user:true in Has Namespaces and shows user namespace Mapping section in above output.

If we enable user remapping we can have extra layer of security and you won't be allow to run container
in privileged mode or chrooting using bind also not allowed. 

6) Seccomp - secure commputing mode
feature of linux kernel that acts as syscall filtering

step 1: create json file as mention below
[root@server1 ~]# vim block_mkdir.json

{
    "defaultAction": "SCMP_ACT_ALLOW",
    "syscalls": [
        {
            "name": "mkdir",
            "action": "SCMP_ACT_ERRNO",
            "args": []
        }
    ]
}

step 2: run container with below command

[root@server1 ~]# docker run -it --security-opt seccomp=block_mkdir.json ubuntu:16.04 bash
root@50ea420094f1:/# cd
root@50ea420094f1:~# mkdir test
mkdir: cannot create directory 'test': Operation not permitted
root@50ea420094f1:~# 

